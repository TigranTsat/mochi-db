syntax = "proto3";
package edu.stanford.cs244b.mochi.server.messages;


option optimize_for = SPEED;

message ObjectCertificate {
    // TODO
}

enum OperationAction {
    READ = 0;
    DELETE = 1;
    WRITE = 2;
}


/* Operation is the method which is applied to a datastore.
Some examples (in form - {ACTION, OP1, OP2,...}) :
    { READ, "KEY" } -> read value for key "KEY"
    { DELETE, "KEY" } -> delete key "KEY"
    { WRITE, "KEY", "VALUE" } -> write value "VALUE" to key "KEY"
    { WRITE_IF_EQUALS, "KEY", "VALUE", "VALUE_TO_CHECK" } -> writes value "VALUE" to key "KEY" if existing value matches "VALUE_TO_CHECK"

*/
message Operation {
    OperationAction action = 1;
    string operand1 = 2;  // object id (oid) is the key 
    string operand2 = 3;
    string operand3 = 4;
    int64 operationNumber = 5;
}

message Transaction {
    repeated .edu.stanford.cs244b.mochi.server.messages.Operation operations = 1;
}

message OperationResult {
    string result = 1;
    // TODO: currentC
}

message TransactionResult {
    repeated .edu.stanford.cs244b.mochi.server.messages.OperationResult operations = 1;
}

/*
Read request <READ, cid, oid, op, nonce>µcr
. The
replica does an upcall to the server code, passing it the
op. When this call returns it sends the result to the
client in a message <READ-ANS, result, nonce, currentC,
rid>µcr
. The nonce is used to ensure that the answer is
not a replay.
*/
message ReadToServer {
    string clientId = 1; // cid
    Transaction transaction = 2; // contains (oid, op#,  op)
    string nonce = 3;
}

/* When this call returns it sends the result to the
client in a message <READ-ANS, result, nonce, currentC,
rid>µcr
*/
message ReadFromServer {
    TransactionResult result = 1;
    string nonce = 2;
    // Note: currentC is embedded into result
    string rid = 3;
}


/* The client sends a <WRITE-1, cid, oid, op#, op>σc
request to the replicas. */
message Write1ToServer {
    string clientId = 1; // cid
    Transaction transaction = 2; // contains (oid, op#,  op)
}

message WriteGrant {
    repeated .edu.stanford.cs244b.mochi.server.messages.MultiGrantCertificateElement multiGrantOList =  1;
}

message WriteCertificate {
    repeated .edu.stanford.cs244b.mochi.server.messages.WriteGrant writeGrants =  1;
}

message Write2ToServer {
    WriteCertificate writeCertificate = 1;
}

message Write2AnsFromServer {
    TransactionResult result = 1; // currentC in embedded inside result
    string rid = 2;
}

message MultiGrantElement {
    string objectId = 1;
    int64 operationNumber = 2;
    int64 timestamp = 3;
    int64 viewstamp = 4;
}

message MultiGrantCertificateElement {
    MultiGrantElement multiGrantElement = 1;
    ObjectCertificate currentC = 2;
}


/* <WRITE-1-OK, grantTS, currentC>µcr, if the replica
granted the next timestamp to this client. */
message Write1OkFromServer {
    repeated .edu.stanford.cs244b.mochi.server.messages.MultiGrantCertificateElement multiGrantOList =  1; // <oid, op#, ts> + vs
    string clientId = 2; // cid
    string hash = 3;
}

/*  <WRITE-1-REFUSED, grantTS, cid, oid, op#, currentC>µcr
, if the replica granted the timestamp to
some other client; the reply contains the grant to
that client, plus the information about this client’s
request (to prevent replays). */
message Write1RefusedFromServer {
    // TODO: add other properties
}

message HelloToServer {
    string msg = 1;
}

message HelloToServer2 {
    string msg = 1;
}

message HelloFromServer {
    string msg = 1;
    string clientMsg = 2;
}

message HelloFromServer2 {
    string msg = 1;
    string clientMsg = 2;
}

message ProtocolMessage {
    oneof payload {
        HelloToServer helloToServer = 101;
        HelloFromServer helloFromServer = 102;
        HelloToServer2 helloToServer2 = 103;
        HelloFromServer2 helloFromServer2 = 104;
        ReadToServer readToServer = 105;
        ReadFromServer readFromServer = 106;
        Write1ToServer write1ToServer = 107;
        Write1OkFromServer write1OkFromServer = 108;
        Write1RefusedFromServer write1RefusedFromServer = 109;
        Write2ToServer write2ToServer = 110;
        Write2AnsFromServer write2AnsFromServer = 111;
    };
    int64 msgTimestamp = 5;
    string serverId = 6;
    string msgId = 7;
    string replyToMsgId = 8;
}